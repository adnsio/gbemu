// Code generated by opsgen. DO NOT EDIT.

package cpu

import (
	"github.com/adnsio/gbemu/pkg/gameboy/cpu/register"
)

// op0x0000 executes NOP
// returns length and cycles
// template control/misc/nop
func op0x0000(c *CPU) (int, int) {
	return 1, 4
}

// op0x0001 executes LD BC,u16
// returns length and cycles
// template x16/lsm/ld
func op0x0001(c *CPU) (int, int) {
	c.SetRegister16Bit(register.BC, c.Fetch16Bit())

	return 3, 12
}

// op0x0002 executes LD (BC),A
// returns length and cycles
// template x8/lsm/ld
func op0x0002(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.BC), c.GetRegister8Bit(register.A))

	return 1, 8
}

// op0x0003 executes INC BC
// returns length and cycles
// template x16/alu/inc
func op0x0003(c *CPU) (int, int) {
	c.SetRegister16Bit(register.BC, c.GetRegister16Bit(register.BC) + 1)

	return 1, 8
}

// op0x0004 executes INC B
// returns length and cycles
// template x8/alu/inc
func op0x0004(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.B)
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.B, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x0005 executes DEC B
// returns length and cycles
// template x8/alu/dec
func op0x0005(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.B)
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.B, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x0006 executes LD B,u8
// returns length and cycles
// template x8/lsm/ld
func op0x0006(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.Fetch8Bit())

	return 2, 8
}

// op0x0008 executes LD (u16),SP
// returns length and cycles
// template x16/lsm/ld
func op0x0008(c *CPU) (int, int) {
	// TODO: set for (u16)

	return 3, 20
}

// op0x0009 executes ADD HL,BC
// returns length and cycles
// template x16/alu/add
func op0x0009(c *CPU) (int, int) {
	destValue := c.GetRegister16Bit(register.HL)
	sourceValue := c.GetRegister16Bit(register.BC)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister16Bit(register.HL, value)

	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return 1, 8
}

// op0x000a executes LD A,(BC)
// returns length and cycles
// template x8/lsm/ld
func op0x000a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(c.GetRegister16Bit(register.BC)))

	return 1, 8
}

// op0x000b executes DEC BC
// returns length and cycles
// template x16/alu/dec
func op0x000b(c *CPU) (int, int) {
	c.SetRegister16Bit(register.BC, c.GetRegister16Bit(register.BC) - 1)

	return 1, 8
}

// op0x000c executes INC C
// returns length and cycles
// template x8/alu/inc
func op0x000c(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.C)
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.C, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x000d executes DEC C
// returns length and cycles
// template x8/alu/dec
func op0x000d(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.C)
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.C, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x000e executes LD C,u8
// returns length and cycles
// template x8/lsm/ld
func op0x000e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.Fetch8Bit())

	return 2, 8
}

// op0x0010 executes STOP
// returns length and cycles
// template control/misc/stop
func op0x0010(c *CPU) (int, int) {
	// TODO: wtf

	return 2, 4
}

// op0x0011 executes LD DE,u16
// returns length and cycles
// template x16/lsm/ld
func op0x0011(c *CPU) (int, int) {
	c.SetRegister16Bit(register.DE, c.Fetch16Bit())

	return 3, 12
}

// op0x0012 executes LD (DE),A
// returns length and cycles
// template x8/lsm/ld
func op0x0012(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.DE), c.GetRegister8Bit(register.A))

	return 1, 8
}

// op0x0013 executes INC DE
// returns length and cycles
// template x16/alu/inc
func op0x0013(c *CPU) (int, int) {
	c.SetRegister16Bit(register.DE, c.GetRegister16Bit(register.DE) + 1)

	return 1, 8
}

// op0x0014 executes INC D
// returns length and cycles
// template x8/alu/inc
func op0x0014(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.D)
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.D, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x0015 executes DEC D
// returns length and cycles
// template x8/alu/dec
func op0x0015(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.D)
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.D, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x0016 executes LD D,u8
// returns length and cycles
// template x8/lsm/ld
func op0x0016(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.Fetch8Bit())

	return 2, 8
}

// op0x0019 executes ADD HL,DE
// returns length and cycles
// template x16/alu/add
func op0x0019(c *CPU) (int, int) {
	destValue := c.GetRegister16Bit(register.HL)
	sourceValue := c.GetRegister16Bit(register.DE)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister16Bit(register.HL, value)

	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return 1, 8
}

// op0x001a executes LD A,(DE)
// returns length and cycles
// template x8/lsm/ld
func op0x001a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(c.GetRegister16Bit(register.DE)))

	return 1, 8
}

// op0x001b executes DEC DE
// returns length and cycles
// template x16/alu/dec
func op0x001b(c *CPU) (int, int) {
	c.SetRegister16Bit(register.DE, c.GetRegister16Bit(register.DE) - 1)

	return 1, 8
}

// op0x001c executes INC E
// returns length and cycles
// template x8/alu/inc
func op0x001c(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.E)
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.E, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x001d executes DEC E
// returns length and cycles
// template x8/alu/dec
func op0x001d(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.E)
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.E, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x001e executes LD E,u8
// returns length and cycles
// template x8/lsm/ld
func op0x001e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.Fetch8Bit())

	return 2, 8
}

// op0x0021 executes LD HL,u16
// returns length and cycles
// template x16/lsm/ld
func op0x0021(c *CPU) (int, int) {
	c.SetRegister16Bit(register.HL, c.Fetch16Bit())

	return 3, 12
}

// op0x0022 executes LD (HL+),A
// returns length and cycles
// template x8/lsm/ld
func op0x0022(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.A))
	// TODO: set for HL

	return 1, 8
}

// op0x0023 executes INC HL
// returns length and cycles
// template x16/alu/inc
func op0x0023(c *CPU) (int, int) {
	c.SetRegister16Bit(register.HL, c.GetRegister16Bit(register.HL) + 1)

	return 1, 8
}

// op0x0024 executes INC H
// returns length and cycles
// template x8/alu/inc
func op0x0024(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.H)
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.H, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x0025 executes DEC H
// returns length and cycles
// template x8/alu/dec
func op0x0025(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.H)
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.H, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x0026 executes LD H,u8
// returns length and cycles
// template x8/lsm/ld
func op0x0026(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.Fetch8Bit())

	return 2, 8
}

// op0x0029 executes ADD HL,HL
// returns length and cycles
// template x16/alu/add
func op0x0029(c *CPU) (int, int) {
	destValue := c.GetRegister16Bit(register.HL)
	sourceValue := c.GetRegister16Bit(register.HL)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister16Bit(register.HL, value)

	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return 1, 8
}

// op0x002a executes LD A,(HL+)
// returns length and cycles
// template x8/lsm/ld
func op0x002a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))
	// TODO: set for HL

	return 1, 8
}

// op0x002b executes DEC HL
// returns length and cycles
// template x16/alu/dec
func op0x002b(c *CPU) (int, int) {
	c.SetRegister16Bit(register.HL, c.GetRegister16Bit(register.HL) - 1)

	return 1, 8
}

// op0x002c executes INC L
// returns length and cycles
// template x8/alu/inc
func op0x002c(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.L)
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.L, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x002d executes DEC L
// returns length and cycles
// template x8/alu/dec
func op0x002d(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.L)
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.L, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x002e executes LD L,u8
// returns length and cycles
// template x8/lsm/ld
func op0x002e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.Fetch8Bit())

	return 2, 8
}

// op0x002f executes CPL
// returns length and cycles
// template x8/alu/cpl
func op0x002f(c *CPU) (int, int) {
	value := ^c.GetRegister8Bit(register.A)

	c.SetRegister8Bit(register.A, value)

	c.SetFlagN()
	c.SetFlagH()

	return 1, 4
}

// op0x0031 executes LD SP,u16
// returns length and cycles
// template x16/lsm/ld
func op0x0031(c *CPU) (int, int) {
	c.SetRegister16Bit(register.SP, c.Fetch16Bit())

	return 3, 12
}

// op0x0032 executes LD (HL-),A
// returns length and cycles
// template x8/lsm/ld
func op0x0032(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.A))
	// TODO: set for HL

	return 1, 8
}

// op0x0033 executes INC SP
// returns length and cycles
// template x16/alu/inc
func op0x0033(c *CPU) (int, int) {
	c.SetRegister16Bit(register.SP, c.GetRegister16Bit(register.SP) + 1)

	return 1, 8
}

// op0x0034 executes INC (HL)
// returns length and cycles
// template x8/alu/inc
func op0x0034(c *CPU) (int, int) {
	destValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 12
}

// op0x0035 executes DEC (HL)
// returns length and cycles
// template x8/alu/dec
func op0x0035(c *CPU) (int, int) {
	destValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 12
}

// op0x0036 executes LD (HL),u8
// returns length and cycles
// template x8/lsm/ld
func op0x0036(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.Fetch8Bit())

	return 2, 12
}

// op0x0039 executes ADD HL,SP
// returns length and cycles
// template x16/alu/add
func op0x0039(c *CPU) (int, int) {
	destValue := c.GetRegister16Bit(register.HL)
	sourceValue := c.GetRegister16Bit(register.SP)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister16Bit(register.HL, value)

	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return 1, 8
}

// op0x003a executes LD A,(HL-)
// returns length and cycles
// template x8/lsm/ld
func op0x003a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))
	// TODO: set for HL

	return 1, 8
}

// op0x003b executes DEC SP
// returns length and cycles
// template x16/alu/dec
func op0x003b(c *CPU) (int, int) {
	c.SetRegister16Bit(register.SP, c.GetRegister16Bit(register.SP) - 1)

	return 1, 8
}

// op0x003c executes INC A
// returns length and cycles
// template x8/alu/inc
func op0x003c(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	value := destValue + 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x003d executes DEC A
// returns length and cycles
// template x8/alu/dec
func op0x003d(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	value := destValue - 1
	carryBits := destValue ^ 1 ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)

	return 1, 4
}

// op0x003e executes LD A,u8
// returns length and cycles
// template x8/lsm/ld
func op0x003e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.Fetch8Bit())

	return 2, 8
}

// op0x003f executes CCF
// returns length and cycles
// template x8/alu/ccf
func op0x003f(c *CPU) (int, int) {
	c.SetFlagN()
	c.SetFlagH()
	if c.GetFlagC() {
		c.UnsetFlagC()
	} else {
		c.SetFlagC()
	}

	return 1, 4
}

// op0x0040 executes LD B,B
// returns length and cycles
// template x8/lsm/ld
func op0x0040(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetRegister8Bit(register.B))

	return 1, 4
}

// op0x0041 executes LD B,C
// returns length and cycles
// template x8/lsm/ld
func op0x0041(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetRegister8Bit(register.C))

	return 1, 4
}

// op0x0042 executes LD B,D
// returns length and cycles
// template x8/lsm/ld
func op0x0042(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetRegister8Bit(register.D))

	return 1, 4
}

// op0x0043 executes LD B,E
// returns length and cycles
// template x8/lsm/ld
func op0x0043(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetRegister8Bit(register.E))

	return 1, 4
}

// op0x0044 executes LD B,H
// returns length and cycles
// template x8/lsm/ld
func op0x0044(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetRegister8Bit(register.H))

	return 1, 4
}

// op0x0045 executes LD B,L
// returns length and cycles
// template x8/lsm/ld
func op0x0045(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetRegister8Bit(register.L))

	return 1, 4
}

// op0x0046 executes LD B,(HL)
// returns length and cycles
// template x8/lsm/ld
func op0x0046(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))

	return 1, 8
}

// op0x0047 executes LD B,A
// returns length and cycles
// template x8/lsm/ld
func op0x0047(c *CPU) (int, int) {
	c.SetRegister8Bit(register.B, c.GetRegister8Bit(register.A))

	return 1, 4
}

// op0x0048 executes LD C,B
// returns length and cycles
// template x8/lsm/ld
func op0x0048(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetRegister8Bit(register.B))

	return 1, 4
}

// op0x0049 executes LD C,C
// returns length and cycles
// template x8/lsm/ld
func op0x0049(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetRegister8Bit(register.C))

	return 1, 4
}

// op0x004a executes LD C,D
// returns length and cycles
// template x8/lsm/ld
func op0x004a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetRegister8Bit(register.D))

	return 1, 4
}

// op0x004b executes LD C,E
// returns length and cycles
// template x8/lsm/ld
func op0x004b(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetRegister8Bit(register.E))

	return 1, 4
}

// op0x004c executes LD C,H
// returns length and cycles
// template x8/lsm/ld
func op0x004c(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetRegister8Bit(register.H))

	return 1, 4
}

// op0x004d executes LD C,L
// returns length and cycles
// template x8/lsm/ld
func op0x004d(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetRegister8Bit(register.L))

	return 1, 4
}

// op0x004e executes LD C,(HL)
// returns length and cycles
// template x8/lsm/ld
func op0x004e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))

	return 1, 8
}

// op0x004f executes LD C,A
// returns length and cycles
// template x8/lsm/ld
func op0x004f(c *CPU) (int, int) {
	c.SetRegister8Bit(register.C, c.GetRegister8Bit(register.A))

	return 1, 4
}

// op0x0050 executes LD D,B
// returns length and cycles
// template x8/lsm/ld
func op0x0050(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetRegister8Bit(register.B))

	return 1, 4
}

// op0x0051 executes LD D,C
// returns length and cycles
// template x8/lsm/ld
func op0x0051(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetRegister8Bit(register.C))

	return 1, 4
}

// op0x0052 executes LD D,D
// returns length and cycles
// template x8/lsm/ld
func op0x0052(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetRegister8Bit(register.D))

	return 1, 4
}

// op0x0053 executes LD D,E
// returns length and cycles
// template x8/lsm/ld
func op0x0053(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetRegister8Bit(register.E))

	return 1, 4
}

// op0x0054 executes LD D,H
// returns length and cycles
// template x8/lsm/ld
func op0x0054(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetRegister8Bit(register.H))

	return 1, 4
}

// op0x0055 executes LD D,L
// returns length and cycles
// template x8/lsm/ld
func op0x0055(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetRegister8Bit(register.L))

	return 1, 4
}

// op0x0056 executes LD D,(HL)
// returns length and cycles
// template x8/lsm/ld
func op0x0056(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))

	return 1, 8
}

// op0x0057 executes LD D,A
// returns length and cycles
// template x8/lsm/ld
func op0x0057(c *CPU) (int, int) {
	c.SetRegister8Bit(register.D, c.GetRegister8Bit(register.A))

	return 1, 4
}

// op0x0058 executes LD E,B
// returns length and cycles
// template x8/lsm/ld
func op0x0058(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetRegister8Bit(register.B))

	return 1, 4
}

// op0x0059 executes LD E,C
// returns length and cycles
// template x8/lsm/ld
func op0x0059(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetRegister8Bit(register.C))

	return 1, 4
}

// op0x005a executes LD E,D
// returns length and cycles
// template x8/lsm/ld
func op0x005a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetRegister8Bit(register.D))

	return 1, 4
}

// op0x005b executes LD E,E
// returns length and cycles
// template x8/lsm/ld
func op0x005b(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetRegister8Bit(register.E))

	return 1, 4
}

// op0x005c executes LD E,H
// returns length and cycles
// template x8/lsm/ld
func op0x005c(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetRegister8Bit(register.H))

	return 1, 4
}

// op0x005d executes LD E,L
// returns length and cycles
// template x8/lsm/ld
func op0x005d(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetRegister8Bit(register.L))

	return 1, 4
}

// op0x005e executes LD E,(HL)
// returns length and cycles
// template x8/lsm/ld
func op0x005e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))

	return 1, 8
}

// op0x005f executes LD E,A
// returns length and cycles
// template x8/lsm/ld
func op0x005f(c *CPU) (int, int) {
	c.SetRegister8Bit(register.E, c.GetRegister8Bit(register.A))

	return 1, 4
}

// op0x0060 executes LD H,B
// returns length and cycles
// template x8/lsm/ld
func op0x0060(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetRegister8Bit(register.B))

	return 1, 4
}

// op0x0061 executes LD H,C
// returns length and cycles
// template x8/lsm/ld
func op0x0061(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetRegister8Bit(register.C))

	return 1, 4
}

// op0x0062 executes LD H,D
// returns length and cycles
// template x8/lsm/ld
func op0x0062(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetRegister8Bit(register.D))

	return 1, 4
}

// op0x0063 executes LD H,E
// returns length and cycles
// template x8/lsm/ld
func op0x0063(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetRegister8Bit(register.E))

	return 1, 4
}

// op0x0064 executes LD H,H
// returns length and cycles
// template x8/lsm/ld
func op0x0064(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetRegister8Bit(register.H))

	return 1, 4
}

// op0x0065 executes LD H,L
// returns length and cycles
// template x8/lsm/ld
func op0x0065(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetRegister8Bit(register.L))

	return 1, 4
}

// op0x0066 executes LD H,(HL)
// returns length and cycles
// template x8/lsm/ld
func op0x0066(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))

	return 1, 8
}

// op0x0067 executes LD H,A
// returns length and cycles
// template x8/lsm/ld
func op0x0067(c *CPU) (int, int) {
	c.SetRegister8Bit(register.H, c.GetRegister8Bit(register.A))

	return 1, 4
}

// op0x0068 executes LD L,B
// returns length and cycles
// template x8/lsm/ld
func op0x0068(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetRegister8Bit(register.B))

	return 1, 4
}

// op0x0069 executes LD L,C
// returns length and cycles
// template x8/lsm/ld
func op0x0069(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetRegister8Bit(register.C))

	return 1, 4
}

// op0x006a executes LD L,D
// returns length and cycles
// template x8/lsm/ld
func op0x006a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetRegister8Bit(register.D))

	return 1, 4
}

// op0x006b executes LD L,E
// returns length and cycles
// template x8/lsm/ld
func op0x006b(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetRegister8Bit(register.E))

	return 1, 4
}

// op0x006c executes LD L,H
// returns length and cycles
// template x8/lsm/ld
func op0x006c(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetRegister8Bit(register.H))

	return 1, 4
}

// op0x006d executes LD L,L
// returns length and cycles
// template x8/lsm/ld
func op0x006d(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetRegister8Bit(register.L))

	return 1, 4
}

// op0x006e executes LD L,(HL)
// returns length and cycles
// template x8/lsm/ld
func op0x006e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))

	return 1, 8
}

// op0x006f executes LD L,A
// returns length and cycles
// template x8/lsm/ld
func op0x006f(c *CPU) (int, int) {
	c.SetRegister8Bit(register.L, c.GetRegister8Bit(register.A))

	return 1, 4
}

// op0x0070 executes LD (HL),B
// returns length and cycles
// template x8/lsm/ld
func op0x0070(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.B))

	return 1, 8
}

// op0x0071 executes LD (HL),C
// returns length and cycles
// template x8/lsm/ld
func op0x0071(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.C))

	return 1, 8
}

// op0x0072 executes LD (HL),D
// returns length and cycles
// template x8/lsm/ld
func op0x0072(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.D))

	return 1, 8
}

// op0x0073 executes LD (HL),E
// returns length and cycles
// template x8/lsm/ld
func op0x0073(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.E))

	return 1, 8
}

// op0x0074 executes LD (HL),H
// returns length and cycles
// template x8/lsm/ld
func op0x0074(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.H))

	return 1, 8
}

// op0x0075 executes LD (HL),L
// returns length and cycles
// template x8/lsm/ld
func op0x0075(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.L))

	return 1, 8
}

// op0x0076 executes HALT
// returns length and cycles
// template control/misc/halt
func op0x0076(c *CPU) (int, int) {
	// TODO: wtf

	return 1, 4
}

// op0x0077 executes LD (HL),A
// returns length and cycles
// template x8/lsm/ld
func op0x0077(c *CPU) (int, int) {
	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), c.GetRegister8Bit(register.A))

	return 1, 8
}

// op0x0078 executes LD A,B
// returns length and cycles
// template x8/lsm/ld
func op0x0078(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetRegister8Bit(register.B))

	return 1, 4
}

// op0x0079 executes LD A,C
// returns length and cycles
// template x8/lsm/ld
func op0x0079(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetRegister8Bit(register.C))

	return 1, 4
}

// op0x007a executes LD A,D
// returns length and cycles
// template x8/lsm/ld
func op0x007a(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetRegister8Bit(register.D))

	return 1, 4
}

// op0x007b executes LD A,E
// returns length and cycles
// template x8/lsm/ld
func op0x007b(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetRegister8Bit(register.E))

	return 1, 4
}

// op0x007c executes LD A,H
// returns length and cycles
// template x8/lsm/ld
func op0x007c(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetRegister8Bit(register.H))

	return 1, 4
}

// op0x007d executes LD A,L
// returns length and cycles
// template x8/lsm/ld
func op0x007d(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetRegister8Bit(register.L))

	return 1, 4
}

// op0x007e executes LD A,(HL)
// returns length and cycles
// template x8/lsm/ld
func op0x007e(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(c.GetRegister16Bit(register.HL)))

	return 1, 8
}

// op0x007f executes LD A,A
// returns length and cycles
// template x8/lsm/ld
func op0x007f(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetRegister8Bit(register.A))

	return 1, 4
}

// op0x0080 executes ADD A,B
// returns length and cycles
// template x8/alu/add
func op0x0080(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0081 executes ADD A,C
// returns length and cycles
// template x8/alu/add
func op0x0081(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0082 executes ADD A,D
// returns length and cycles
// template x8/alu/add
func op0x0082(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0083 executes ADD A,E
// returns length and cycles
// template x8/alu/add
func op0x0083(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0084 executes ADD A,H
// returns length and cycles
// template x8/alu/add
func op0x0084(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0085 executes ADD A,L
// returns length and cycles
// template x8/alu/add
func op0x0085(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0086 executes ADD A,(HL)
// returns length and cycles
// template x8/alu/add
func op0x0086(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 8
}

// op0x0087 executes ADD A,A
// returns length and cycles
// template x8/alu/add
func op0x0087(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0088 executes ADC A,B
// returns length and cycles
// template x8/alu/adc
func op0x0088(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0089 executes ADC A,C
// returns length and cycles
// template x8/alu/adc
func op0x0089(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x008a executes ADC A,D
// returns length and cycles
// template x8/alu/adc
func op0x008a(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x008b executes ADC A,E
// returns length and cycles
// template x8/alu/adc
func op0x008b(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x008c executes ADC A,H
// returns length and cycles
// template x8/alu/adc
func op0x008c(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x008d executes ADC A,L
// returns length and cycles
// template x8/alu/adc
func op0x008d(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x008e executes ADC A,(HL)
// returns length and cycles
// template x8/alu/adc
func op0x008e(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 8
}

// op0x008f executes ADC A,A
// returns length and cycles
// template x8/alu/adc
func op0x008f(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0090 executes SUB A,B
// returns length and cycles
// template x8/alu/sub
func op0x0090(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x0091 executes SUB A,C
// returns length and cycles
// template x8/alu/sub
func op0x0091(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x0092 executes SUB A,D
// returns length and cycles
// template x8/alu/sub
func op0x0092(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x0093 executes SUB A,E
// returns length and cycles
// template x8/alu/sub
func op0x0093(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x0094 executes SUB A,H
// returns length and cycles
// template x8/alu/sub
func op0x0094(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x0095 executes SUB A,L
// returns length and cycles
// template x8/alu/sub
func op0x0095(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x0096 executes SUB A,(HL)
// returns length and cycles
// template x8/alu/sub
func op0x0096(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 8
}

// op0x0097 executes SUB A,A
// returns length and cycles
// template x8/alu/sub
func op0x0097(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x0098 executes SBC A,B
// returns length and cycles
// template x8/alu/sbc
func op0x0098(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x0099 executes SBC A,C
// returns length and cycles
// template x8/alu/sbc
func op0x0099(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x009a executes SBC A,D
// returns length and cycles
// template x8/alu/sbc
func op0x009a(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x009b executes SBC A,E
// returns length and cycles
// template x8/alu/sbc
func op0x009b(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x009c executes SBC A,H
// returns length and cycles
// template x8/alu/sbc
func op0x009c(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x009d executes SBC A,L
// returns length and cycles
// template x8/alu/sbc
func op0x009d(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x009e executes SBC A,(HL)
// returns length and cycles
// template x8/alu/sbc
func op0x009e(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 8
}

// op0x009f executes SBC A,A
// returns length and cycles
// template x8/alu/sbc
func op0x009f(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 1, 4
}

// op0x00a0 executes AND A,B
// returns length and cycles
// template x8/alu/and
func op0x00a0(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a1 executes AND A,C
// returns length and cycles
// template x8/alu/and
func op0x00a1(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a2 executes AND A,D
// returns length and cycles
// template x8/alu/and
func op0x00a2(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a3 executes AND A,E
// returns length and cycles
// template x8/alu/and
func op0x00a3(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a4 executes AND A,H
// returns length and cycles
// template x8/alu/and
func op0x00a4(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a5 executes AND A,L
// returns length and cycles
// template x8/alu/and
func op0x00a5(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a6 executes AND A,(HL)
// returns length and cycles
// template x8/alu/and
func op0x00a6(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 8
}

// op0x00a7 executes AND A,A
// returns length and cycles
// template x8/alu/and
func op0x00a7(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a8 executes XOR A,B
// returns length and cycles
// template x8/alu/xor
func op0x00a8(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00a9 executes XOR A,C
// returns length and cycles
// template x8/alu/xor
func op0x00a9(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00aa executes XOR A,D
// returns length and cycles
// template x8/alu/xor
func op0x00aa(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00ab executes XOR A,E
// returns length and cycles
// template x8/alu/xor
func op0x00ab(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00ac executes XOR A,H
// returns length and cycles
// template x8/alu/xor
func op0x00ac(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00ad executes XOR A,L
// returns length and cycles
// template x8/alu/xor
func op0x00ad(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00ae executes XOR A,(HL)
// returns length and cycles
// template x8/alu/xor
func op0x00ae(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 8
}

// op0x00af executes XOR A,A
// returns length and cycles
// template x8/alu/xor
func op0x00af(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b0 executes OR A,B
// returns length and cycles
// template x8/alu/or
func op0x00b0(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b1 executes OR A,C
// returns length and cycles
// template x8/alu/or
func op0x00b1(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b2 executes OR A,D
// returns length and cycles
// template x8/alu/or
func op0x00b2(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b3 executes OR A,E
// returns length and cycles
// template x8/alu/or
func op0x00b3(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b4 executes OR A,H
// returns length and cycles
// template x8/alu/or
func op0x00b4(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b5 executes OR A,L
// returns length and cycles
// template x8/alu/or
func op0x00b5(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b6 executes OR A,(HL)
// returns length and cycles
// template x8/alu/or
func op0x00b6(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 8
}

// op0x00b7 executes OR A,A
// returns length and cycles
// template x8/alu/or
func op0x00b7(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 1, 4
}

// op0x00b8 executes CP A,B
// returns length and cycles
// template x8/alu/cp
func op0x00b8(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.B)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x00b9 executes CP A,C
// returns length and cycles
// template x8/alu/cp
func op0x00b9(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.C)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x00ba executes CP A,D
// returns length and cycles
// template x8/alu/cp
func op0x00ba(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.D)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x00bb executes CP A,E
// returns length and cycles
// template x8/alu/cp
func op0x00bb(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.E)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x00bc executes CP A,H
// returns length and cycles
// template x8/alu/cp
func op0x00bc(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.H)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x00bd executes CP A,L
// returns length and cycles
// template x8/alu/cp
func op0x00bd(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.L)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x00be executes CP A,(HL)
// returns length and cycles
// template x8/alu/cp
func op0x00be(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 8
}

// op0x00bf executes CP A,A
// returns length and cycles
// template x8/alu/cp
func op0x00bf(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.GetRegister8Bit(register.A)
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 1, 4
}

// op0x00c6 executes ADD A,u8
// returns length and cycles
// template x8/alu/add
func op0x00c6(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 2, 8
}

// op0x00ce executes ADC A,u8
// returns length and cycles
// template x8/alu/adc
func op0x00ce(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue + sourceValue + carry
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 2, 8
}

// op0x00d6 executes SUB A,u8
// returns length and cycles
// template x8/alu/sub
func op0x00d6(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 2, 8
}

// op0x00de executes SBC A,u8
// returns length and cycles
// template x8/alu/sbc
func op0x00de(c *CPU) (int, int) {
	carry := uint8(0)
	if c.GetFlagC() {
		carry = uint8(1)
	}

	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue - (sourceValue + carry)
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagC8Bit(carryBits)

	return 2, 8
}

// op0x00e0 executes LD (FF00+u8),A
// returns length and cycles
// template x8/lsm/ld
func op0x00e0(c *CPU) (int, int) {
	// TODO: set for (FF00+u8)

	return 2, 12
}

// op0x00e2 executes LD (FF00+C),A
// returns length and cycles
// template x8/lsm/ld
func op0x00e2(c *CPU) (int, int) {
	// TODO: set for (FF00+C)

	return 1, 8
}

// op0x00e6 executes AND A,u8
// returns length and cycles
// template x8/alu/and
func op0x00e6(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue & sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()
	c.UnsetFlagC()

	return 2, 8
}

// op0x00e8 executes ADD SP,i8
// returns length and cycles
// template x16/alu/add
func op0x00e8(c *CPU) (int, int) {
	destValue := c.GetRegister16Bit(register.SP)
	sourceValue := uint16(int8(c.Fetch8Bit()))
	value := destValue + sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetRegister16Bit(register.SP, value)

	c.UnsetFlagZ()
	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return 2, 16
}

// op0x00ea executes LD (u16),A
// returns length and cycles
// template x8/lsm/ld
func op0x00ea(c *CPU) (int, int) {
	c.SetMemory8Bit(c.Fetch16Bit(), c.GetRegister8Bit(register.A))

	return 3, 16
}

// op0x00ee executes XOR A,u8
// returns length and cycles
// template x8/alu/xor
func op0x00ee(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue ^ sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 2, 8
}

// op0x00f0 executes LD A,(FF00+u8)
// returns length and cycles
// template x8/lsm/ld
func op0x00f0(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(0xff00 + uint16(c.Fetch8Bit())))

	return 2, 12
}

// op0x00f2 executes LD A,(FF00+C)
// returns length and cycles
// template x8/lsm/ld
func op0x00f2(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(0xff00 + uint16(c.GetRegister8Bit(register.C))))

	return 1, 8
}

// op0x00f6 executes OR A,u8
// returns length and cycles
// template x8/alu/or
func op0x00f6(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue | sourceValue

	c.SetRegister8Bit(register.A, value)

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.UnsetFlagH()
	c.UnsetFlagC()

	return 2, 8
}

// op0x00f8 executes LD HL,SP+i8
// returns length and cycles
// template x16/alu/ld
func op0x00f8(c *CPU) (int, int) {
	sourceValue1 := c.GetRegister16Bit(register.SP)
	sourceValue2 := uint16(int8(c.Fetch8Bit()))
	value := sourceValue1 + sourceValue2
	carryBits := sourceValue1 ^ sourceValue2 ^ value

	c.SetRegister16Bit(register.HL, value)

	c.UnsetFlagZ()
	c.UnsetFlagN()
	c.SetFlagH16Bit(carryBits)
	c.SetFlagC16Bit(carryBits)

	return 2, 12
}

// op0x00f9 executes LD SP,HL
// returns length and cycles
// template x16/lsm/ld
func op0x00f9(c *CPU) (int, int) {
	c.SetRegister16Bit(register.SP, c.GetRegister16Bit(register.HL))

	return 1, 8
}

// op0x00fa executes LD A,(u16)
// returns length and cycles
// template x8/lsm/ld
func op0x00fa(c *CPU) (int, int) {
	c.SetRegister8Bit(register.A, c.GetMemory8Bit(c.Fetch16Bit()))

	return 3, 16
}

// op0x00fe executes CP A,u8
// returns length and cycles
// template x8/alu/cp
func op0x00fe(c *CPU) (int, int) {
	destValue := c.GetRegister8Bit(register.A)
	sourceValue := c.Fetch8Bit()
	value := destValue - sourceValue
	carryBits := destValue ^ sourceValue ^ value

	c.SetFlagZ8Bit(value)
	c.SetFlagN()
	c.SetFlagH8Bit(carryBits)
	c.SetFlagCBool(destValue < value)

	return 2, 8
}

// op0xcb40 executes BIT 0,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb40(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb41 executes BIT 0,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb41(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb42 executes BIT 0,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb42(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb43 executes BIT 0,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb43(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb44 executes BIT 0,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb44(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb45 executes BIT 0,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb45(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb46 executes BIT 0,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb46(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb47 executes BIT 0,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb47(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 0) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb48 executes BIT 1,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb48(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb49 executes BIT 1,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb49(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb4a executes BIT 1,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb4a(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb4b executes BIT 1,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb4b(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb4c executes BIT 1,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb4c(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb4d executes BIT 1,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb4d(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb4e executes BIT 1,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb4e(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb4f executes BIT 1,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb4f(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 1) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb50 executes BIT 2,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb50(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb51 executes BIT 2,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb51(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb52 executes BIT 2,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb52(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb53 executes BIT 2,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb53(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb54 executes BIT 2,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb54(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb55 executes BIT 2,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb55(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb56 executes BIT 2,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb56(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb57 executes BIT 2,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb57(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 2) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb58 executes BIT 3,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb58(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb59 executes BIT 3,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb59(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb5a executes BIT 3,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb5a(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb5b executes BIT 3,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb5b(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb5c executes BIT 3,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb5c(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb5d executes BIT 3,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb5d(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb5e executes BIT 3,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb5e(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb5f executes BIT 3,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb5f(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 3) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb60 executes BIT 4,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb60(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb61 executes BIT 4,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb61(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb62 executes BIT 4,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb62(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb63 executes BIT 4,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb63(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb64 executes BIT 4,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb64(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb65 executes BIT 4,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb65(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb66 executes BIT 4,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb66(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb67 executes BIT 4,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb67(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 4) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb68 executes BIT 5,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb68(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb69 executes BIT 5,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb69(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb6a executes BIT 5,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb6a(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb6b executes BIT 5,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb6b(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb6c executes BIT 5,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb6c(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb6d executes BIT 5,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb6d(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb6e executes BIT 5,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb6e(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb6f executes BIT 5,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb6f(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 5) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb70 executes BIT 6,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb70(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb71 executes BIT 6,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb71(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb72 executes BIT 6,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb72(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb73 executes BIT 6,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb73(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb74 executes BIT 6,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb74(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb75 executes BIT 6,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb75(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb76 executes BIT 6,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb76(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb77 executes BIT 6,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb77(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 6) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb78 executes BIT 7,B
// returns length and cycles
// template x8/rsb/bit
func op0xcb78(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb79 executes BIT 7,C
// returns length and cycles
// template x8/rsb/bit
func op0xcb79(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb7a executes BIT 7,D
// returns length and cycles
// template x8/rsb/bit
func op0xcb7a(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb7b executes BIT 7,E
// returns length and cycles
// template x8/rsb/bit
func op0xcb7b(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb7c executes BIT 7,H
// returns length and cycles
// template x8/rsb/bit
func op0xcb7c(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb7d executes BIT 7,L
// returns length and cycles
// template x8/rsb/bit
func op0xcb7d(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb7e executes BIT 7,(HL)
// returns length and cycles
// template x8/rsb/bit
func op0xcb7e(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 12
}

// op0xcb7f executes BIT 7,A
// returns length and cycles
// template x8/rsb/bit
func op0xcb7f(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := (sourceValue >> 7) % 2

	c.SetFlagZ8Bit(value)
	c.UnsetFlagN()
	c.SetFlagH()

	return 2, 8
}

// op0xcb80 executes RES 0,B
// returns length and cycles
// template x8/rsb/res
func op0xcb80(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 0)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcb81 executes RES 0,C
// returns length and cycles
// template x8/rsb/res
func op0xcb81(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 0)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcb82 executes RES 0,D
// returns length and cycles
// template x8/rsb/res
func op0xcb82(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 0)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcb83 executes RES 0,E
// returns length and cycles
// template x8/rsb/res
func op0xcb83(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 0)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcb84 executes RES 0,H
// returns length and cycles
// template x8/rsb/res
func op0xcb84(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 0)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcb85 executes RES 0,L
// returns length and cycles
// template x8/rsb/res
func op0xcb85(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 0)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcb86 executes RES 0,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcb86(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 0)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcb87 executes RES 0,A
// returns length and cycles
// template x8/rsb/res
func op0xcb87(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 0)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcb88 executes RES 1,B
// returns length and cycles
// template x8/rsb/res
func op0xcb88(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 1)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcb89 executes RES 1,C
// returns length and cycles
// template x8/rsb/res
func op0xcb89(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 1)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcb8a executes RES 1,D
// returns length and cycles
// template x8/rsb/res
func op0xcb8a(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 1)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcb8b executes RES 1,E
// returns length and cycles
// template x8/rsb/res
func op0xcb8b(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 1)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcb8c executes RES 1,H
// returns length and cycles
// template x8/rsb/res
func op0xcb8c(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 1)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcb8d executes RES 1,L
// returns length and cycles
// template x8/rsb/res
func op0xcb8d(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 1)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcb8e executes RES 1,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcb8e(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 1)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcb8f executes RES 1,A
// returns length and cycles
// template x8/rsb/res
func op0xcb8f(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 1)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcb90 executes RES 2,B
// returns length and cycles
// template x8/rsb/res
func op0xcb90(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 2)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcb91 executes RES 2,C
// returns length and cycles
// template x8/rsb/res
func op0xcb91(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 2)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcb92 executes RES 2,D
// returns length and cycles
// template x8/rsb/res
func op0xcb92(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 2)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcb93 executes RES 2,E
// returns length and cycles
// template x8/rsb/res
func op0xcb93(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 2)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcb94 executes RES 2,H
// returns length and cycles
// template x8/rsb/res
func op0xcb94(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 2)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcb95 executes RES 2,L
// returns length and cycles
// template x8/rsb/res
func op0xcb95(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 2)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcb96 executes RES 2,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcb96(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 2)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcb97 executes RES 2,A
// returns length and cycles
// template x8/rsb/res
func op0xcb97(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 2)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcb98 executes RES 3,B
// returns length and cycles
// template x8/rsb/res
func op0xcb98(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 3)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcb99 executes RES 3,C
// returns length and cycles
// template x8/rsb/res
func op0xcb99(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 3)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcb9a executes RES 3,D
// returns length and cycles
// template x8/rsb/res
func op0xcb9a(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 3)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcb9b executes RES 3,E
// returns length and cycles
// template x8/rsb/res
func op0xcb9b(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 3)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcb9c executes RES 3,H
// returns length and cycles
// template x8/rsb/res
func op0xcb9c(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 3)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcb9d executes RES 3,L
// returns length and cycles
// template x8/rsb/res
func op0xcb9d(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 3)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcb9e executes RES 3,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcb9e(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 3)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcb9f executes RES 3,A
// returns length and cycles
// template x8/rsb/res
func op0xcb9f(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 3)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcba0 executes RES 4,B
// returns length and cycles
// template x8/rsb/res
func op0xcba0(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 4)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcba1 executes RES 4,C
// returns length and cycles
// template x8/rsb/res
func op0xcba1(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 4)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcba2 executes RES 4,D
// returns length and cycles
// template x8/rsb/res
func op0xcba2(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 4)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcba3 executes RES 4,E
// returns length and cycles
// template x8/rsb/res
func op0xcba3(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 4)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcba4 executes RES 4,H
// returns length and cycles
// template x8/rsb/res
func op0xcba4(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 4)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcba5 executes RES 4,L
// returns length and cycles
// template x8/rsb/res
func op0xcba5(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 4)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcba6 executes RES 4,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcba6(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 4)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcba7 executes RES 4,A
// returns length and cycles
// template x8/rsb/res
func op0xcba7(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 4)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcba8 executes RES 5,B
// returns length and cycles
// template x8/rsb/res
func op0xcba8(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 5)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcba9 executes RES 5,C
// returns length and cycles
// template x8/rsb/res
func op0xcba9(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 5)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbaa executes RES 5,D
// returns length and cycles
// template x8/rsb/res
func op0xcbaa(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 5)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbab executes RES 5,E
// returns length and cycles
// template x8/rsb/res
func op0xcbab(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 5)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbac executes RES 5,H
// returns length and cycles
// template x8/rsb/res
func op0xcbac(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 5)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbad executes RES 5,L
// returns length and cycles
// template x8/rsb/res
func op0xcbad(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 5)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbae executes RES 5,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcbae(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 5)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbaf executes RES 5,A
// returns length and cycles
// template x8/rsb/res
func op0xcbaf(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 5)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbb0 executes RES 6,B
// returns length and cycles
// template x8/rsb/res
func op0xcbb0(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 6)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbb1 executes RES 6,C
// returns length and cycles
// template x8/rsb/res
func op0xcbb1(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 6)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbb2 executes RES 6,D
// returns length and cycles
// template x8/rsb/res
func op0xcbb2(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 6)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbb3 executes RES 6,E
// returns length and cycles
// template x8/rsb/res
func op0xcbb3(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 6)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbb4 executes RES 6,H
// returns length and cycles
// template x8/rsb/res
func op0xcbb4(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 6)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbb5 executes RES 6,L
// returns length and cycles
// template x8/rsb/res
func op0xcbb5(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 6)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbb6 executes RES 6,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcbb6(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 6)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbb7 executes RES 6,A
// returns length and cycles
// template x8/rsb/res
func op0xcbb7(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 6)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbb8 executes RES 7,B
// returns length and cycles
// template x8/rsb/res
func op0xcbb8(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue & ^(uint8(1) << 7)

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbb9 executes RES 7,C
// returns length and cycles
// template x8/rsb/res
func op0xcbb9(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue & ^(uint8(1) << 7)

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbba executes RES 7,D
// returns length and cycles
// template x8/rsb/res
func op0xcbba(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue & ^(uint8(1) << 7)

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbbb executes RES 7,E
// returns length and cycles
// template x8/rsb/res
func op0xcbbb(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue & ^(uint8(1) << 7)

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbbc executes RES 7,H
// returns length and cycles
// template x8/rsb/res
func op0xcbbc(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue & ^(uint8(1) << 7)

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbbd executes RES 7,L
// returns length and cycles
// template x8/rsb/res
func op0xcbbd(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue & ^(uint8(1) << 7)

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbbe executes RES 7,(HL)
// returns length and cycles
// template x8/rsb/res
func op0xcbbe(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue & ^(uint8(1) << 7)

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbbf executes RES 7,A
// returns length and cycles
// template x8/rsb/res
func op0xcbbf(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue & ^(uint8(1) << 7)

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbc0 executes SET 0,B
// returns length and cycles
// template x8/rsb/set
func op0xcbc0(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 0

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbc1 executes SET 0,C
// returns length and cycles
// template x8/rsb/set
func op0xcbc1(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 0

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbc2 executes SET 0,D
// returns length and cycles
// template x8/rsb/set
func op0xcbc2(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 0

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbc3 executes SET 0,E
// returns length and cycles
// template x8/rsb/set
func op0xcbc3(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 0

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbc4 executes SET 0,H
// returns length and cycles
// template x8/rsb/set
func op0xcbc4(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 0

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbc5 executes SET 0,L
// returns length and cycles
// template x8/rsb/set
func op0xcbc5(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 0

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbc6 executes SET 0,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbc6(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 0

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbc7 executes SET 0,A
// returns length and cycles
// template x8/rsb/set
func op0xcbc7(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 0

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbc8 executes SET 1,B
// returns length and cycles
// template x8/rsb/set
func op0xcbc8(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 1

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbc9 executes SET 1,C
// returns length and cycles
// template x8/rsb/set
func op0xcbc9(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 1

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbca executes SET 1,D
// returns length and cycles
// template x8/rsb/set
func op0xcbca(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 1

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbcb executes SET 1,E
// returns length and cycles
// template x8/rsb/set
func op0xcbcb(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 1

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbcc executes SET 1,H
// returns length and cycles
// template x8/rsb/set
func op0xcbcc(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 1

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbcd executes SET 1,L
// returns length and cycles
// template x8/rsb/set
func op0xcbcd(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 1

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbce executes SET 1,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbce(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 1

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbcf executes SET 1,A
// returns length and cycles
// template x8/rsb/set
func op0xcbcf(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 1

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbd0 executes SET 2,B
// returns length and cycles
// template x8/rsb/set
func op0xcbd0(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 2

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbd1 executes SET 2,C
// returns length and cycles
// template x8/rsb/set
func op0xcbd1(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 2

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbd2 executes SET 2,D
// returns length and cycles
// template x8/rsb/set
func op0xcbd2(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 2

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbd3 executes SET 2,E
// returns length and cycles
// template x8/rsb/set
func op0xcbd3(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 2

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbd4 executes SET 2,H
// returns length and cycles
// template x8/rsb/set
func op0xcbd4(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 2

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbd5 executes SET 2,L
// returns length and cycles
// template x8/rsb/set
func op0xcbd5(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 2

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbd6 executes SET 2,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbd6(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 2

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbd7 executes SET 2,A
// returns length and cycles
// template x8/rsb/set
func op0xcbd7(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 2

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbd8 executes SET 3,B
// returns length and cycles
// template x8/rsb/set
func op0xcbd8(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 3

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbd9 executes SET 3,C
// returns length and cycles
// template x8/rsb/set
func op0xcbd9(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 3

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbda executes SET 3,D
// returns length and cycles
// template x8/rsb/set
func op0xcbda(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 3

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbdb executes SET 3,E
// returns length and cycles
// template x8/rsb/set
func op0xcbdb(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 3

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbdc executes SET 3,H
// returns length and cycles
// template x8/rsb/set
func op0xcbdc(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 3

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbdd executes SET 3,L
// returns length and cycles
// template x8/rsb/set
func op0xcbdd(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 3

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbde executes SET 3,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbde(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 3

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbdf executes SET 3,A
// returns length and cycles
// template x8/rsb/set
func op0xcbdf(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 3

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbe0 executes SET 4,B
// returns length and cycles
// template x8/rsb/set
func op0xcbe0(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 4

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbe1 executes SET 4,C
// returns length and cycles
// template x8/rsb/set
func op0xcbe1(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 4

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbe2 executes SET 4,D
// returns length and cycles
// template x8/rsb/set
func op0xcbe2(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 4

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbe3 executes SET 4,E
// returns length and cycles
// template x8/rsb/set
func op0xcbe3(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 4

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbe4 executes SET 4,H
// returns length and cycles
// template x8/rsb/set
func op0xcbe4(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 4

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbe5 executes SET 4,L
// returns length and cycles
// template x8/rsb/set
func op0xcbe5(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 4

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbe6 executes SET 4,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbe6(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 4

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbe7 executes SET 4,A
// returns length and cycles
// template x8/rsb/set
func op0xcbe7(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 4

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbe8 executes SET 5,B
// returns length and cycles
// template x8/rsb/set
func op0xcbe8(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 5

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbe9 executes SET 5,C
// returns length and cycles
// template x8/rsb/set
func op0xcbe9(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 5

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbea executes SET 5,D
// returns length and cycles
// template x8/rsb/set
func op0xcbea(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 5

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbeb executes SET 5,E
// returns length and cycles
// template x8/rsb/set
func op0xcbeb(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 5

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbec executes SET 5,H
// returns length and cycles
// template x8/rsb/set
func op0xcbec(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 5

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbed executes SET 5,L
// returns length and cycles
// template x8/rsb/set
func op0xcbed(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 5

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbee executes SET 5,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbee(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 5

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbef executes SET 5,A
// returns length and cycles
// template x8/rsb/set
func op0xcbef(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 5

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbf0 executes SET 6,B
// returns length and cycles
// template x8/rsb/set
func op0xcbf0(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 6

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbf1 executes SET 6,C
// returns length and cycles
// template x8/rsb/set
func op0xcbf1(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 6

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbf2 executes SET 6,D
// returns length and cycles
// template x8/rsb/set
func op0xcbf2(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 6

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbf3 executes SET 6,E
// returns length and cycles
// template x8/rsb/set
func op0xcbf3(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 6

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbf4 executes SET 6,H
// returns length and cycles
// template x8/rsb/set
func op0xcbf4(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 6

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbf5 executes SET 6,L
// returns length and cycles
// template x8/rsb/set
func op0xcbf5(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 6

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbf6 executes SET 6,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbf6(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 6

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbf7 executes SET 6,A
// returns length and cycles
// template x8/rsb/set
func op0xcbf7(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 6

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

// op0xcbf8 executes SET 7,B
// returns length and cycles
// template x8/rsb/set
func op0xcbf8(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.B)
	value := sourceValue | uint8(1) << 7

	c.SetRegister8Bit(register.B, value)

	return 2, 8
}

// op0xcbf9 executes SET 7,C
// returns length and cycles
// template x8/rsb/set
func op0xcbf9(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.C)
	value := sourceValue | uint8(1) << 7

	c.SetRegister8Bit(register.C, value)

	return 2, 8
}

// op0xcbfa executes SET 7,D
// returns length and cycles
// template x8/rsb/set
func op0xcbfa(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.D)
	value := sourceValue | uint8(1) << 7

	c.SetRegister8Bit(register.D, value)

	return 2, 8
}

// op0xcbfb executes SET 7,E
// returns length and cycles
// template x8/rsb/set
func op0xcbfb(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.E)
	value := sourceValue | uint8(1) << 7

	c.SetRegister8Bit(register.E, value)

	return 2, 8
}

// op0xcbfc executes SET 7,H
// returns length and cycles
// template x8/rsb/set
func op0xcbfc(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.H)
	value := sourceValue | uint8(1) << 7

	c.SetRegister8Bit(register.H, value)

	return 2, 8
}

// op0xcbfd executes SET 7,L
// returns length and cycles
// template x8/rsb/set
func op0xcbfd(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.L)
	value := sourceValue | uint8(1) << 7

	c.SetRegister8Bit(register.L, value)

	return 2, 8
}

// op0xcbfe executes SET 7,(HL)
// returns length and cycles
// template x8/rsb/set
func op0xcbfe(c *CPU) (int, int) {
	sourceValue := c.GetMemory8Bit(c.GetRegister16Bit(register.HL))
	value := sourceValue | uint8(1) << 7

	c.SetMemory8Bit(c.GetRegister16Bit(register.HL), value)

	return 2, 16
}

// op0xcbff executes SET 7,A
// returns length and cycles
// template x8/rsb/set
func op0xcbff(c *CPU) (int, int) {
	sourceValue := c.GetRegister8Bit(register.A)
	value := sourceValue | uint8(1) << 7

	c.SetRegister8Bit(register.A, value)

	return 2, 8
}

